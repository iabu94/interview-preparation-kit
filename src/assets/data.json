[
    {
        "criteria": "personal",
        "questions": [
            {
                "no": 1,
                "title": "Tell me about yourself",
                "answers": [
                    "My calling name is Abdullah",
                    "I am from Kekirawa",
                    "I am an Innovative Software Engineer with 4+ years of industry experience in developing systems for multinational organizations in Sri Lanka and USA.",
                    "I have a track record of working with large global teams to deliver scalable enterprise solutions.",
                    "If I need to mention about my education career,",
                    "I have completed my degree in University of Kelaniya",
                    "And along with my degree I have completed some extra courses on Pluralsight and Udemy as well to boostup my knowledge.",
                    "I am good team player and a quick learner and I have discovered this qualities during my project works.",
                    "My mentors always says that I am a good leader too, because I satisfy that role too."
                ]
            }
        ]
    },
    {
        "criteria": "csharp",
        "questions": [
            {
                "no": 1,
                "title": "Abstract vs Interface",
                "answers": [
                    "Abstract Contains both declaration and definition part, but Interface Contains only a declaration part.",
                    "We Can't do Multiple inheritance in Abstract, but Multiple inheritance is possible in Interfaces.",
                    "Absract Do have Constructor, but the Interface does not.",
                    "Abstract can have Different access modifiers, but the Interface has Only the public access modifier because everything in the interface is public.",
                    "In the performance perspective, abstract class is fast. Because interface will take time to search actual method in the related class.",
                    "Abstract class Contain methods, fields, constants, etc., and the Interface Contain only methods.",
                    "Abstract Can be fully, partially, or not implemented, but the Interface Should be fully implemented."
                ]
            },
            {
                "no": 2,
                "title": "Access Modifiers",
                "answers": [
                    "<b>Public</b> - There are no restrictions on accessing public members. The type/member are accessible for all classes whether it is within the same assembly or another assembly that references it.",
                    "<b>Private</b> - The type/member is only accessible within the same class. We cannot access those outside the class. This is the default access modifier type if no modifier is specified.",
                    "<b>Protected</b> - The type/member is accessible within the class definition and any class that inherits from that class.",
                    "<b>Internal</b> - The type/member can be accessed by any classes in the same assembly, but not from another assembly.",
                    "<b>Protected Internal</b> - The type/member can be accessed by any classes in the current assembly in which it's declared, or from within a derived class in another assembly.",
                    "<b>Private Protected</b> - The type/member can be accessed only within its declaring assembly, by code in the same class or in a type that is derived from that class."
                ]
            },
            {
                "no": 3,
                "title": "Class Types (Sealed, Static, Abstract)"
            },
            {
                "no": 4,
                "title": "Delegates"
            },
            {
                "no": 5,
                "title": "OOP Concepts in C#"
            },
            {
                "no": 6,
                "title": "Lambda expressions in C#...?"
            },
            {
                "no": 7,
                "title": "Extension methods"
            },
            {
                "no": 8,
                "title": "Best Practices"
            }
        ]
    },
    {
        "criteria": "netcore",
        "questions": [
            {
                "no": 1,
                "title": "Singleton vs Scoped vs Transient"
            },
            {
                "no": 2,
                "title": "Exception Handling"
            },
            {
                "no": 3,
                "title": "Advantages of .NET Core over .NET"
            },
            {
                "no": 4,
                "title": "Startup.cs"
            },
            {
                "no": 5,
                "title": "ConfigureServices method"
            },
            {
                "no": 6,
                "title": "Configure method"
            },
            {
                "no": 7,
                "title": "Middleware"
            },
            {
                "no": 8,
                "title": "Best practices"
            }
        ]
    },
    {
        "criteria": "angular",
        "questions": [
            {
                "no": 1,
                "title": "Why Angular?"
            },
            {
                "no": 2,
                "title": "How does Angular works?"
            },
            {
                "no": 3,
                "title": "Directives"
            },
            {
                "no": 4,
                "title": "Super"
            },
            {
                "no": 5,
                "title": "How to improve the performance?"
            },
            {
                "no": 6,
                "title": "Modules and Components and Services"
            },
            {
                "no": 7,
                "title": "PIPES"
            },
            {
                "no": 8,
                "title": "Pass data within components"
            },
            {
                "no": 9,
                "title": "Lazy Loading"
            }
        ]
    },
    {
        "criteria": "netmvc",
        "questions": [
            {
                "no": 1,
                "title": "What is MVC?"
            },
            {
                "no": 2,
                "title": "ViewBag vs ViewData vs TempData"
            }
        ]
    },
    {
        "criteria": "sql",
        "questions": [
            {
                "no": 1,
                "title": "Indexes"
            },
            {
                "no": 2,
                "title": "Views"
            },
            {
                "no": 3,
                "title": "Primary key vs Unique key"
            },
            {
                "no": 4,
                "title": "Stored Procedures vs Functions vs Triggers"
            }
        ]
    },
    {
        "criteria": "ef",
        "questions": [
            {
                "no": 1,
                "title": "Why Entity Framework ?"
            },
            {
                "no": 2,
                "title": "What is LINQ ?"
            }
        ]
    },
    {
        "criteria": "projects",
        "questions": [
            {
                "no": 1,
                "title": "Explain the Project and Your Role"
            },
            {
                "no": 2,
                "title": "Onion Architecture"
            },
            {
                "no": 3,
                "title": "SOLID Principles"
            },
            {
                "no": 4,
                "title": "Design Patterns"
            }
        ]
    },
    {
        "criteria": "agile",
        "questions": [
            {
                "no": 1,
                "title": "What is pair programming...?"
            }
        ]
    },
    {
        "criteria": "hr",
        "questions": [
            {
                "no": 1,
                "title": "About our company ?"
            },
            {
                "no": 2,
                "title": "Handled conflicts within a project team you are leading ?"
            },
            {
                "no": 3,
                "title": "Passionate about ?"
            },
            {
                "no": 4,
                "title": "Why do you want to work here ?"
            },
            {
                "no": 5,
                "title": "Difficult Situation Faced on Project"
            },
            {
                "no": 6,
                "title": "Where do you want to see yourself in after five years ?"
            },
            {
                "no": 7,
                "title": "Manage stress among your team members ?"
            }
        ]
    }
]